/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.reports;

import com.joca.database.event.EventDB;
import com.joca.frontend.FramePrincipal;
import com.joca.model.exceptions.InvalidRequisitesException;
import com.joca.model.filter.Filter;
import com.joca.model.filter.FilterTypeEnum;
import com.joca.model.participant.ParticipantTypeEnum;
import com.joca.services.EventService;
import com.joca.services.ReportsService;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author joca
 */
public class ParticipantReportForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;

    /**
     * Creates new form ValidationForm
     */
    public ParticipantReportForm(FramePrincipal pane) {
        initComponents();
        this.framePrincipal = pane;
        this.typeCombo.setModel(new DefaultComboBoxModel(ParticipantTypeEnum.values()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generateButton = new javax.swing.JButton();
        eventIdLabel = new javax.swing.JLabel();
        idSearchBar = new javax.swing.JTextField();
        typeCheckBox = new javax.swing.JCheckBox();
        labelFilters = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        typeCombo = new javax.swing.JComboBox<>();
        institutionCheckBox = new javax.swing.JCheckBox();
        institutionSearch = new javax.swing.JTextField();

        setClosable(true);
        setForeground(java.awt.Color.white);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reporte de participantes");
        setMinimumSize(new java.awt.Dimension(350, 210));
        setPreferredSize(new java.awt.Dimension(470, 218));

        generateButton.setText("Generar Reporte");
        generateButton.setEnabled(false);
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        eventIdLabel.setText("Código del evento");

        idSearchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                idSearchBarCaretUpdate(evt);
            }
        });

        typeCheckBox.setText("Tipo de participante");

        labelFilters.setBackground(new java.awt.Color(51, 51, 51));
        labelFilters.setForeground(new java.awt.Color(102, 102, 102));
        labelFilters.setText("Filtros opcionales");

        institutionCheckBox.setText("Institución de procedencia");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(eventIdLabel)
                        .addGap(18, 18, 18)
                        .addComponent(idSearchBar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelFilters)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(typeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(typeCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(institutionCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(institutionSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(generateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventIdLabel)
                    .addComponent(idSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelFilters)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeCheckBox)
                    .addComponent(typeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(institutionCheckBox)
                    .addComponent(institutionSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generateButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        ReportsService reportsService = new ReportsService();
        try {
            framePrincipal.saveHtml(reportsService.getParticipantReport(getFilters(), idSearchBar.getText()), LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd-HH:mm:ss")) + "__" + idSearchBar.getText() + ".html");
        } catch (SQLException | InvalidRequisitesException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_generateButtonActionPerformed

    private void idSearchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_idSearchBarCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_idSearchBarCaretUpdate

    private void validateIsInUse() {
        if (idSearchBar.getText().isBlank()) {
            return;
        }
        try {
            EventService eventService = new EventService(new EventDB());
            if (eventService.isKeyInUse(idSearchBar.getText())) {
                generateButton.setEnabled(true);
            } else {
                generateButton.setEnabled(false);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private List<Filter> getFilters() {
        List<Filter> filters = new ArrayList<>();
        filters.add(new Filter("e.id", idSearchBar.getText(), FilterTypeEnum.EQUAL));
        if (typeCheckBox.isSelected()) {
            filters.add(new Filter("p.type", ((ParticipantTypeEnum) typeCombo.getSelectedItem()).name(), FilterTypeEnum.EQUAL));
        }
        if (institutionCheckBox.isSelected()) {
            filters.add(new Filter("p.institution", institutionSearch.getText(), FilterTypeEnum.EQUAL));
        }
        return filters;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel eventIdLabel;
    private javax.swing.JButton generateButton;
    private javax.swing.JTextField idSearchBar;
    private javax.swing.JCheckBox institutionCheckBox;
    private javax.swing.JTextField institutionSearch;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelFilters;
    private javax.swing.JCheckBox typeCheckBox;
    private javax.swing.JComboBox<String> typeCombo;
    // End of variables declaration//GEN-END:variables
}
