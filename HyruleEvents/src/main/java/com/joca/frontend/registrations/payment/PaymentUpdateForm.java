/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.registrations.payment;

import com.joca.database.registration.PaymentValidationDB;
import com.joca.frontend.FramePrincipal;
import com.joca.model.UpdateTypeEnum;
import com.joca.model.exceptions.DuplicatedKeyException;
import com.joca.model.exceptions.InvalidFormatException;
import com.joca.model.exceptions.InvalidRequisitesException;
import com.joca.model.exceptions.NotFoundException;
import com.joca.model.exceptions.NotRowsAffectedException;
import com.joca.model.registration.payment.Payment;
import com.joca.model.registration.payment.PaymentMethodEnum;
import com.joca.services.PaymentValidationService;
import java.awt.Color;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author joca
 */
public class PaymentUpdateForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;
    private UpdateTypeEnum type;
    private Payment payment;

    /**
     * Creates new form CreatePaymentForm
     *
     * @param framePrincipal
     * @param type
     */
    public PaymentUpdateForm(Payment payment, FramePrincipal framePrincipal, UpdateTypeEnum type) {
        this.framePrincipal = framePrincipal;
        this.type = type;
        this.payment = payment;
        initComponents();
        setTitle(type.getTitleName() + " pago");
        updateButton.setText(type.getTitleName());
        methodComboBox.setModel(new DefaultComboBoxModel(PaymentMethodEnum.values()));
        setPayment();
    }

    private void setPayment() {
        eventIdTxt.setText(payment.getEventId());
        emailTxt.setText(payment.getParticipantEmail());
        eventIdTxt.setEditable(false);
        emailTxt.setEditable(false);
        if (payment.getMethod() != null) {
            methodComboBox.setSelectedItem(payment.getMethod());
            paymentAmountTxt.setText(String.valueOf(payment.getAmount()));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventIdLabel = new javax.swing.JLabel();
        eventIdTxt = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        paymentMethodLabel = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        labelResult = new javax.swing.JLabel();
        paymentAmountTxt = new javax.swing.JTextField();
        paymentAmountLabel = new javax.swing.JLabel();
        methodComboBox = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        eventIdLabel.setForeground(new java.awt.Color(153, 153, 153));
        eventIdLabel.setText("Código del evento");

        eventIdTxt.setBackground(new java.awt.Color(51, 51, 51));
        eventIdTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                eventIdTxtCaretUpdate(evt);
            }
        });

        emailLabel.setForeground(new java.awt.Color(153, 153, 153));
        emailLabel.setText("Email de participante");

        paymentMethodLabel.setText("Método de pago");

        emailTxt.setBackground(new java.awt.Color(51, 51, 51));
        emailTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                emailTxtCaretUpdate(evt);
            }
        });

        updateButton.setText("Crear");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        paymentAmountLabel.setText("Monto de pago");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(emailLabel)
                            .addComponent(eventIdLabel)
                            .addComponent(paymentMethodLabel)
                            .addComponent(paymentAmountLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                            .addComponent(eventIdTxt)
                            .addComponent(paymentAmountTxt)
                            .addComponent(methodComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventIdLabel)
                    .addComponent(eventIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentMethodLabel)
                    .addComponent(methodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentAmountLabel)
                    .addComponent(paymentAmountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updateButton)
                    .addComponent(labelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eventIdTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_eventIdTxtCaretUpdate
    }//GEN-LAST:event_eventIdTxtCaretUpdate

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {
            parsePayment();
            PaymentValidationService paymentService = new PaymentValidationService(new PaymentValidationDB());
            if (type.equals(UpdateTypeEnum.ACTUALIZAR)) {
                int confirm = JOptionPane.showConfirmDialog(this,
                    "Actualizar el pago hara que la inscripción deba volverse a validar\n¿Desea continuar?", "Confirmar cambios",
                    JOptionPane.YES_NO_OPTION);
                if (confirm != JOptionPane.YES_OPTION) {
                    return;
                }
                paymentService.updatePayment(payment);
            } else {
                paymentService.setPayment(payment);
            }
            setMessage("Pago del participante " + payment.getParticipantEmail()+ " en el evento " + payment.getEventId() + " " + type.getUpdateMessage(), true);
            framePrincipal.printOnLog("Pago del participante " + payment.getParticipantEmail()+ " en el evento " + payment.getEventId() + " " + type.getUpdateMessage());
        } catch (NotRowsAffectedException | DuplicatedKeyException e) {
            setMessage(e.getMessage(), false);
            framePrincipal.printOnLog(e.getMessage());
        } catch (SQLException e) {
            framePrincipal.printOnLog("Ocurrio un error al " + type.getTitleName().toLowerCase() + " el pago, vuelva a intentarlo más tarde - " + e.getMessage());
            setMessage(e.getMessage(), false);
        } catch (InvalidFormatException | InvalidRequisitesException | NotFoundException ex) {
            setMessage(ex.getMessage(), false);
            framePrincipal.printOnLog("Error al " + type.getTitleName().toLowerCase() + " el pago - " + ex.getMessage());
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void emailTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_emailTxtCaretUpdate
    }//GEN-LAST:event_emailTxtCaretUpdate


    private void setMessage(String message, boolean success) {
        if (success) {
            labelResult.setForeground(Color.green);
        } else {
            labelResult.setForeground(Color.red);
        }
        labelResult.setText(message);
    }

    private void parsePayment() throws InvalidFormatException {
        payment = new Payment();
        payment.setEventId(eventIdTxt.getText());
        payment.setParticipantEmail(emailTxt.getText());
        try {
            payment.setMethod((PaymentMethodEnum) methodComboBox.getSelectedItem());
        } catch (Exception e) {
            throw new InvalidFormatException("Por favor, ingrese un tipo de pago valido");
        }
        try {
            payment.setAmount(Double.parseDouble(paymentAmountTxt.getText()));
        } catch (NumberFormatException e) {
            throw new InvalidFormatException("Por favor, ingrese un monto de pago valido");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel eventIdLabel;
    private javax.swing.JTextField eventIdTxt;
    private javax.swing.JLabel labelResult;
    private javax.swing.JComboBox<String> methodComboBox;
    private javax.swing.JLabel paymentAmountLabel;
    private javax.swing.JTextField paymentAmountTxt;
    private javax.swing.JLabel paymentMethodLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
