/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.registrations.validations;

import com.joca.database.registration.PaymentValidationDB;
import com.joca.database.registration.RegistrationDB;
import com.joca.frontend.FramePrincipal;
import com.joca.model.exceptions.InvalidRequisitesException;
import com.joca.model.exceptions.NotFoundException;
import com.joca.model.exceptions.NotRowsAffectedException;
import com.joca.model.registration.RegistrationStatusEnum;
import com.joca.model.registration.ValidationDTO;
import com.joca.services.PaymentValidationService;
import com.joca.services.RegistrationService;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author joca
 */
public class ValidationActionForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;

    /**
     * Creates new form ValidationForm
     */
    public ValidationActionForm(FramePrincipal pane) {
        initComponents();
        this.framePrincipal = pane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        validateButton = new javax.swing.JButton();
        eventIdLabel = new javax.swing.JLabel();
        idSearchBar = new javax.swing.JTextField();
        emailParticipantLabel = new javax.swing.JLabel();
        emailSearchBar = new javax.swing.JTextField();

        setClosable(true);
        setForeground(java.awt.Color.white);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Pagos");
        setMinimumSize(new java.awt.Dimension(350, 140));
        setPreferredSize(new java.awt.Dimension(350, 150));

        validateButton.setText("Validar");
        validateButton.setEnabled(false);
        validateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateButtonActionPerformed(evt);
            }
        });

        eventIdLabel.setText("Código de evento");

        idSearchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                idSearchBarCaretUpdate(evt);
            }
        });

        emailParticipantLabel.setText("Email de participante");

        emailSearchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                emailSearchBarCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailParticipantLabel)
                    .addComponent(eventIdLabel))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailSearchBar, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
                    .addComponent(idSearchBar)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(validateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventIdLabel)
                    .addComponent(idSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailParticipantLabel)
                    .addComponent(emailSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(validateButton)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void validateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateButtonActionPerformed
        ValidationDTO validation = new ValidationDTO();
        validation.setEventId(idSearchBar.getText());
        validation.setParticipantEmail(emailSearchBar.getText());
        validation.setStatus(RegistrationStatusEnum.VALIDADA);
        PaymentValidationService validationService = new PaymentValidationService(new PaymentValidationDB());
        try {
            validationService.updateValidation(validation);
            String message = "Inscripción del participante " + validation.getParticipantEmail() + " en el evento " + validation.getEventId() + " validada con éxito";
            JOptionPane.showMessageDialog(this, message, "Inscripción validada", JOptionPane.INFORMATION_MESSAGE);
            framePrincipal.printOnLog(message);
        } catch (NotRowsAffectedException | SQLException e) {
            framePrincipal.printOnLog("Ocurrio un error al validar la inscripción, vuelva a intentarlo más tarde - " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Ocurrio un error al validar la inscripción, vuelva a intentarlo más tarde");
        } catch (InvalidRequisitesException ex) {
            framePrincipal.printOnLog(ex.getMessage());
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NotFoundException ex) {
            String message = "Error al validar la inscripción: " + ex.getMessage();
            framePrincipal.printOnLog(message);
            JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_validateButtonActionPerformed

    private void idSearchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_idSearchBarCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_idSearchBarCaretUpdate

    private void validateIsInUse() {
        if (idSearchBar.getText().isBlank() || emailSearchBar.getText().isBlank()) {
            return;
        }
        RegistrationService registrationService = new RegistrationService(new RegistrationDB());
        try {
            if (registrationService.isKeysInUse(emailSearchBar.getText(), idSearchBar.getText())) {
                PaymentValidationService validationService = new PaymentValidationService(new PaymentValidationDB());
                if (validationService.isValidated(emailSearchBar.getText(), idSearchBar.getText())) {
                    validateButton.setEnabled(false);                    
                } else {
                    validateButton.setEnabled(true);
                }
            } else {
                validateButton.setEnabled(false);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (NotFoundException ex) {
            validateButton.setEnabled(false);
        }
    }

    private void emailSearchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_emailSearchBarCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_emailSearchBarCaretUpdate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel emailParticipantLabel;
    private javax.swing.JTextField emailSearchBar;
    private javax.swing.JLabel eventIdLabel;
    private javax.swing.JTextField idSearchBar;
    private javax.swing.JButton validateButton;
    // End of variables declaration//GEN-END:variables
}
