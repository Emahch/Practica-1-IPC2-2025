/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.payments.payment;

import com.joca.database.registration.PaymentValidationDB;
import com.joca.database.registration.RegistrationDB;
import com.joca.frontend.FramePrincipal;
import com.joca.frontend.registrations.payment.PaymentUpdateForm;
import com.joca.model.UpdateTypeEnum;
import com.joca.model.exceptions.NotFoundException;
import com.joca.model.exceptions.NotRowsAffectedException;
import com.joca.model.registration.payment.Payment;
import com.joca.services.PaymentValidationService;
import com.joca.services.RegistrationService;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author joca
 */
public class PaymentActionForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;

    /**
     * Creates new form PaymentForm
     */
    public PaymentActionForm(FramePrincipal pane) {
        initComponents();
        this.framePrincipal = pane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newButton = new javax.swing.JButton();
        eventIdLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        editLabel = new javax.swing.JLabel();
        idSearchBar = new javax.swing.JTextField();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        emailParticipantLabel = new javax.swing.JLabel();
        emailSearchBar = new javax.swing.JTextField();

        setClosable(true);
        setForeground(java.awt.Color.white);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Pagos");
        setMinimumSize(new java.awt.Dimension(350, 190));
        setPreferredSize(new java.awt.Dimension(350, 200));

        newButton.setText("Registrar Pago");
        newButton.setEnabled(false);
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        eventIdLabel.setText("Código de evento");

        editLabel.setForeground(new java.awt.Color(153, 153, 153));
        editLabel.setText("Editar");

        idSearchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                idSearchBarCaretUpdate(evt);
            }
        });

        deleteButton.setText("Eliminar Pago");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Editar Pago");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        emailParticipantLabel.setText("Email de participante");

        emailSearchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                emailSearchBarCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(emailParticipantLabel)
                    .addComponent(eventIdLabel))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(emailSearchBar)
                    .addComponent(idSearchBar))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                        .addComponent(editButton)
                        .addGap(29, 29, 29)
                        .addComponent(deleteButton)
                        .addContainerGap(48, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(newButton)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventIdLabel)
                    .addComponent(idSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailParticipantLabel)
                    .addComponent(emailSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(newButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(editLabel)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        Payment payment = new Payment();
        payment.setEventId(idSearchBar.getText());
        payment.setParticipantEmail(emailSearchBar.getText());
        PaymentUpdateForm paymentUpdateForm = new PaymentUpdateForm(payment, framePrincipal, UpdateTypeEnum.CREAR);
        framePrincipal.openNewWindow(paymentUpdateForm);
    }//GEN-LAST:event_newButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        PaymentValidationService paymentService = new PaymentValidationService(new PaymentValidationDB());
        String eventId = idSearchBar.getText();
        String participantEmail = emailSearchBar.getText();
        try {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Eliminar el pago del participante " + participantEmail + "\n en el evento " + eventId + " ?", "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                paymentService.deletePayment(participantEmail, eventId);
                framePrincipal.printOnLog("Pago del participante " + participantEmail + " en el evento " + eventId + " eliminado con éxito");
                JOptionPane.showMessageDialog(this, "Pago del participante " + participantEmail + "\n en el evento " + eventId + " eliminado con éxito");
            }
        } catch (NotRowsAffectedException | SQLException ex) {
            framePrincipal.printOnLog("Error al intentar eliminar el pago - " + ex.getMessage());
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        PaymentValidationService paymentService = new PaymentValidationService(new PaymentValidationDB());
        try {
            Payment payment = paymentService.getPayment(emailSearchBar.getText(), idSearchBar.getText());
            PaymentUpdateForm paymentUpdateForm = new PaymentUpdateForm(payment, framePrincipal, UpdateTypeEnum.ACTUALIZAR);
            framePrincipal.openNewWindow(paymentUpdateForm);
        } catch (NotFoundException | SQLException ex) {
            framePrincipal.printOnLog("Error al intentar actualizar la inscripción - " + ex.getMessage());
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void idSearchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_idSearchBarCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_idSearchBarCaretUpdate

    private void validateIsInUse() {
        if (idSearchBar.getText().isBlank() || emailSearchBar.getText().isBlank()) {
            return;
        }
        RegistrationService registrationService = new RegistrationService(new RegistrationDB());
        try {
            if (registrationService.isKeysInUse(emailSearchBar.getText(), idSearchBar.getText())) {
                PaymentValidationService paymentService = new PaymentValidationService(new PaymentValidationDB());
                Payment payment = paymentService.getPayment(emailSearchBar.getText(), idSearchBar.getText());
                editButton.setEnabled(true);
                deleteButton.setEnabled(true);
                newButton.setEnabled(false);
            } else {
                editButton.setEnabled(false);
                deleteButton.setEnabled(false);
                newButton.setEnabled(false);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (NotFoundException ex) {
            editButton.setEnabled(false);
            deleteButton.setEnabled(false);
            newButton.setEnabled(true);
        }
    }

    private void emailSearchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_emailSearchBarCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_emailSearchBarCaretUpdate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel editLabel;
    private javax.swing.JLabel emailParticipantLabel;
    private javax.swing.JTextField emailSearchBar;
    private javax.swing.JLabel eventIdLabel;
    private javax.swing.JTextField idSearchBar;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton newButton;
    // End of variables declaration//GEN-END:variables
}
