/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.activities;

import com.joca.database.activity.ActivityDB;
import com.joca.frontend.FramePrincipal;
import com.joca.frontend.GenericTable;
import com.joca.model.UpdateTypeEnum;
import com.joca.model.activity.Activity;
import com.joca.model.exceptions.InvalidRequisitesException;
import com.joca.model.exceptions.NotFoundException;
import com.joca.model.exceptions.NotRowsAffectedException;
import com.joca.model.filter.Filter;
import com.joca.model.filter.FilterTypeEnum;
import com.joca.services.ActivityService;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;
import javax.swing.JOptionPane;

/**
 *
 * @author joca
 */
public class ActivityActionForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;
    
    /**
     * Creates new form ActivityForm
     */
    public ActivityActionForm(FramePrincipal pane) {
        initComponents();
        this.framePrincipal = pane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        idLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        editLabel = new javax.swing.JLabel();
        searchBar = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();

        setClosable(true);
        setForeground(java.awt.Color.white);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Actividades");
        setMinimumSize(new java.awt.Dimension(250, 50));
        setPreferredSize(new java.awt.Dimension(470, 200));

        searchButton.setText("Buscar");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        newButton.setText("Nueva Actividad");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        idLabel.setText("Buscar por código");

        editLabel.setForeground(new java.awt.Color(153, 153, 153));
        editLabel.setText("Editar");

        searchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchBarCaretUpdate(evt);
            }
        });

        searchLabel.setForeground(new java.awt.Color(153, 153, 153));
        searchLabel.setText("Buscar");

        deleteButton.setText("Eliminar");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Editar");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(idLabel)
                                .addGap(12, 12, 12)
                                .addComponent(searchBar, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton)
                                .addGap(6, 6, 6))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addComponent(editButton)
                                .addGap(56, 56, 56)
                                .addComponent(deleteButton)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(newButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchLabel)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchButton)
                    .addComponent(idLabel)
                    .addComponent(searchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        ActivityService activityService = new ActivityService(new ActivityDB());
        try {
            Optional<Filter> filter = getFilter();
            List<Activity> activities;
            if (filter.isEmpty()) {
                activities = activityService.getAllActivities();
            } else {
                activities = activityService.getActivitiesByFilter(List.of(filter.get()));
            }
            GenericTable genericTable = new GenericTable(List.copyOf(activities), GenericTable.ACTIVITY_MODEL, "Actividades encontradas");
            framePrincipal.openNewWindow(genericTable);
            framePrincipal.printOnLog( activities.size() + " Actividades encontradas.");
        } catch (InvalidRequisitesException | NotFoundException | SQLException e) {
            framePrincipal.printOnLog(e.getMessage());
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        ActivityUpdateForm activityUpdateForm = new ActivityUpdateForm(framePrincipal, UpdateTypeEnum.CREAR);
        framePrincipal.openNewWindow(activityUpdateForm);
    }//GEN-LAST:event_newButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        ActivityService activityService = new ActivityService(new ActivityDB());
        String id = searchBar.getText();
        try {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Eliminar actividad con código " + id + " ?", "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                activityService.deleteActivity(id);
                framePrincipal.printOnLog("Actividad con código " + id + " eliminada con éxito");
                JOptionPane.showMessageDialog(this, "Actividad con código " + id + " eliminada con éxito");
            }
        } catch (SQLException ex) {
            String message;
            if (ex.getErrorCode() == 1451) {
                message = "Error al intentar eliminar la actividad: la actividad se encuentra en uso en otros registros";
            } else {
                message = "Error al intentar eliminar la actividad - codigo de error " + ex.getErrorCode();
            }
            JOptionPane.showMessageDialog(this, message);
            framePrincipal.printOnLog(message);
        } catch (NotRowsAffectedException ex) {
            framePrincipal.printOnLog("Error al intentar eliminar la actividad - " + ex.getMessage());
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        ActivityService activityService = new ActivityService(new ActivityDB());
        Activity activity;
        try {
            activity = activityService.getActivityByID(searchBar.getText());
            ActivityUpdateForm activityUpdateForm = new ActivityUpdateForm(activity, activity.getId(), framePrincipal, UpdateTypeEnum.ACTUALIZAR);
            framePrincipal.openNewWindow(activityUpdateForm);
        } catch (NotFoundException | SQLException ex) {
            framePrincipal.printOnLog("Error al intentar actualizar la actividad - " + ex.getMessage());
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void searchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchBarCaretUpdate
        ActivityService activityService = new ActivityService(new ActivityDB());
        try {
            boolean isActivityAvailable = !activityService.isKeyInUse(searchBar.getText());
            if (isActivityAvailable) {
                editButton.setEnabled(false);
                deleteButton.setEnabled(false);
            } else {
                editButton.setEnabled(true);
                deleteButton.setEnabled(true);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_searchBarCaretUpdate

    private Optional<Filter> getFilter() {
        if (searchBar.getText().isBlank()) {
            return Optional.empty();
        }
        return Optional.of(new Filter("id", searchBar.getText(), FilterTypeEnum.EQUAL));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel editLabel;
    private javax.swing.JLabel idLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton newButton;
    private javax.swing.JTextField searchBar;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchLabel;
    // End of variables declaration//GEN-END:variables
}
