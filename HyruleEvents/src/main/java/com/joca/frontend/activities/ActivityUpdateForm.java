/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.activities;

import com.joca.database.activity.ActivityDB;
import com.joca.frontend.FramePrincipal;
import com.joca.model.UpdateTypeEnum;
import com.joca.model.activity.Activity;
import com.joca.model.activity.ActivityTypeEnum;
import com.joca.model.exceptions.DuplicatedKeyException;
import com.joca.model.exceptions.InvalidFormatException;
import com.joca.model.exceptions.InvalidRequisitesException;
import com.joca.model.exceptions.NotFoundException;
import com.joca.model.exceptions.NotRowsAffectedException;
import com.joca.services.ActivityService;
import java.awt.Color;
import java.sql.SQLException;
import java.time.LocalTime;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author joca
 */
public class ActivityUpdateForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;
    private String originalId;
    private UpdateTypeEnum type;
    private Activity activity;
    
    /**
     * Creates new form CreateActivityForm
     * @param framePrincipal
     * @param type
     */
    public ActivityUpdateForm(FramePrincipal framePrincipal, UpdateTypeEnum type) {
        this.framePrincipal = framePrincipal;
        this.type = type;
        initComponents();
        setTitle(type.getTitleName() + " actividad");
        updateButton.setText(type.getTitleName());
        typeComboBox.setModel(new DefaultComboBoxModel(ActivityTypeEnum.values()));
    }
    
    public ActivityUpdateForm(Activity activity, String originalId, FramePrincipal framePrincipal, UpdateTypeEnum type) {
        this(framePrincipal, type);
        this.originalId = originalId;
        this.activity = activity;
        setActivity(activity);
    }
    
    private void setActivity(Activity activity) {
        idTxt.setText(activity.getId());
        idEventTxt.setText(activity.getEventID());
        titleTxt.setText(activity.getTitle());
        typeComboBox.setSelectedItem(activity.getType());
        emailTxt.setText(activity.getSpeakerEmail());
        hourStartTimeSpinner.setValue(activity.getStartTime().getHour());
        minsStartTimeSpinner.setValue(activity.getStartTime().getMinute());
        hourEndTimeSpinner.setValue(activity.getEndTime().getHour());
        minsEndTimeSpinner.setValue(activity.getEndTime().getMinute());
        spinnerMaxCapacity.setValue(activity.getMaxCapacity());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idLabel = new javax.swing.JLabel();
        idTxt = new javax.swing.JTextField();
        titleLabel = new javax.swing.JLabel();
        startTimeLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        maxCapacityLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        titleTxt = new javax.swing.JTextField();
        emailTxt = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        typeComboBox = new javax.swing.JComboBox<>();
        hourStartTimeSpinner = new javax.swing.JSpinner();
        minsStartTimeSpinner = new javax.swing.JSpinner();
        startTimeHour = new javax.swing.JLabel();
        startTimeMins = new javax.swing.JLabel();
        spinnerMaxCapacity = new javax.swing.JSpinner();
        labelResult = new javax.swing.JLabel();
        idEventLabel = new javax.swing.JLabel();
        idEventTxt = new javax.swing.JTextField();
        endTimeLabel = new javax.swing.JLabel();
        endTimeHour = new javax.swing.JLabel();
        hourEndTimeSpinner = new javax.swing.JSpinner();
        endTimeMins = new javax.swing.JLabel();
        minsEndTimeSpinner = new javax.swing.JSpinner();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        idLabel.setText("Código actividad");

        idTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                idTxtCaretUpdate(evt);
            }
        });

        titleLabel.setText("Titulo");

        startTimeLabel.setText("Hora inicio");

        typeLabel.setText("Tipo");

        maxCapacityLabel.setText("Capacidad máxima");

        emailLabel.setText("Email encargado");

        updateButton.setText("Crear");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        hourStartTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        minsStartTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        startTimeHour.setText("Hora");

        startTimeMins.setText("Minutos");

        spinnerMaxCapacity.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        idEventLabel.setText("Código evento");

        idEventTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                idEventTxtCaretUpdate(evt);
            }
        });

        endTimeLabel.setText("Hora fin");

        endTimeHour.setText("Hora");

        hourEndTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        endTimeMins.setText("Minutos");

        minsEndTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maxCapacityLabel)
                            .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(typeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(startTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(idLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(idEventLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(endTimeLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleTxt)
                            .addComponent(emailTxt)
                            .addComponent(idTxt)
                            .addComponent(typeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spinnerMaxCapacity)
                            .addComponent(idEventTxt)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 56, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(startTimeHour)
                                        .addGap(18, 18, 18)
                                        .addComponent(hourStartTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(startTimeMins)
                                        .addGap(18, 18, 18)
                                        .addComponent(minsStartTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(endTimeHour)
                                        .addGap(18, 18, 18)
                                        .addComponent(hourEndTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(endTimeMins)
                                        .addGap(18, 18, 18)
                                        .addComponent(minsEndTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(idTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idEventLabel)
                    .addComponent(idEventTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(titleLabel)
                    .addComponent(titleTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startTimeLabel)
                    .addComponent(hourStartTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minsStartTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startTimeHour)
                    .addComponent(startTimeMins))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTimeLabel)
                    .addComponent(hourEndTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minsEndTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endTimeHour)
                    .addComponent(endTimeMins))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxCapacityLabel)
                    .addComponent(spinnerMaxCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_idTxtCaretUpdate
        ActivityService activityService = new ActivityService(new ActivityDB());
        try {
            boolean isActivityAvailable = !activityService.isKeyInUse(idTxt.getText());
            if (!isActivityAvailable) {
                if (originalId != null && idTxt.getText().equals(originalId)) {
                    updateButton.setEnabled(true);
                    idTxt.setForeground(Color.white);
                    return;
                }
                idTxt.setForeground(Color.red);
                updateButton.setEnabled(false);
            } else {
                idTxt.setForeground(Color.white);
                updateButton.setEnabled(true);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_idTxtCaretUpdate

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {
            parseActivity();
            ActivityService activityService = new ActivityService(new ActivityDB());
            if (type.equals(UpdateTypeEnum.ACTUALIZAR)) {
                activityService.updateActivity(activity, originalId);
                originalId = activity.getId();
            } else {
                activityService.createActivity(activity);
            }
            setMessage("Actividad con código: " + activity.getId() + " " + type.getUpdateMessage(), true);
            framePrincipal.printOnLog("Actividad con código " + activity.getId() + " " + type.getUpdateMessage());
        } catch (NotRowsAffectedException | DuplicatedKeyException e) {
            setMessage(e.getMessage(), false);
            framePrincipal.printOnLog(e.getMessage());
        } catch (SQLException e) {
            framePrincipal.printOnLog("Ocurrio un error al " + type.getTitleName().toLowerCase() + " la actividad, vuelva a intentarlo más tarde - código de error " + e.getErrorCode());
            setMessage(e.getMessage(), false);
        } catch (InvalidFormatException | InvalidRequisitesException | NotFoundException ex) {
            setMessage(ex.getMessage(), false);
            framePrincipal.printOnLog("Error al " + type.getTitleName().toLowerCase() + " la actividad - " + ex.getMessage());
        }
        idTxtCaretUpdate(null);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void idEventTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_idEventTxtCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_idEventTxtCaretUpdate

    private void setMessage(String message, boolean success) {
        if (success) {
            labelResult.setForeground(Color.green);
        } else {
            labelResult.setForeground(Color.red);
        }
        labelResult.setText(message);
    }
    
    private void parseActivity() throws InvalidFormatException {
        activity = new Activity();
        activity.setId(idTxt.getText());
        activity.setTitle(titleTxt.getText());
        activity.setSpeakerEmail(emailTxt.getText());
        activity.setEventID(idEventTxt.getText());
        try {
            activity.setStartTime(LocalTime.of((Integer) hourStartTimeSpinner.getValue(), (Integer) minsStartTimeSpinner.getValue()));            
        } catch (Exception e) {
            throw new InvalidFormatException("Por favor, ingrese una hora de inicio valida");
        }
        try {
            activity.setEndTime(LocalTime.of((Integer) hourEndTimeSpinner.getValue(), (Integer) minsEndTimeSpinner.getValue()));            
        } catch (Exception e) {
            throw new InvalidFormatException("Por favor, ingrese una hora de fin valida");
        }
        try {
            activity.setMaxCapacity((Integer) spinnerMaxCapacity.getValue());
        } catch (Exception e) {
            throw new InvalidFormatException("Por favor, ingrese una cantidad máxima valida");
        }
        try {
            activity.setType((ActivityTypeEnum) typeComboBox.getSelectedItem());            
        } catch (Exception e) {
            throw new InvalidFormatException("Por favor, ingrese un tipo de actividad valida");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel endTimeHour;
    private javax.swing.JLabel endTimeLabel;
    private javax.swing.JLabel endTimeMins;
    private javax.swing.JSpinner hourEndTimeSpinner;
    private javax.swing.JSpinner hourStartTimeSpinner;
    private javax.swing.JLabel idEventLabel;
    private javax.swing.JTextField idEventTxt;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTxt;
    private javax.swing.JLabel labelResult;
    private javax.swing.JLabel maxCapacityLabel;
    private javax.swing.JSpinner minsEndTimeSpinner;
    private javax.swing.JSpinner minsStartTimeSpinner;
    private javax.swing.JSpinner spinnerMaxCapacity;
    private javax.swing.JLabel startTimeHour;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JLabel startTimeMins;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JTextField titleTxt;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
