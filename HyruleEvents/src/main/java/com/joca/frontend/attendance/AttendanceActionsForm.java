/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.attendance;

import com.joca.database.attendance.AttendanceDB;
import com.joca.frontend.FramePrincipal;
import com.joca.frontend.GenericTable;
import com.joca.model.UpdateTypeEnum;
import com.joca.model.attendance.Attendance;
import com.joca.model.exceptions.InvalidRequisitesException;
import com.joca.model.exceptions.NotFoundException;
import com.joca.model.exceptions.NotRowsAffectedException;
import com.joca.model.filter.Filter;
import com.joca.model.filter.FilterTypeEnum;
import com.joca.services.AttendanceService;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author joca
 */
public class AttendanceActionsForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;

    /**
     * Creates new form AttendanceForm
     */
    public AttendanceActionsForm(FramePrincipal pane) {
        initComponents();
        this.framePrincipal = pane;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        eventIdLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        editLabel = new javax.swing.JLabel();
        idSearchBar = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        emailParticipantLabel = new javax.swing.JLabel();
        emailSearchBar = new javax.swing.JTextField();

        setClosable(true);
        setForeground(java.awt.Color.white);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Inscripciones");
        setMinimumSize(new java.awt.Dimension(470, 200));
        setPreferredSize(new java.awt.Dimension(400, 230));

        searchButton.setText("Buscar");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        newButton.setText("Nueva Inscripción");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        eventIdLabel.setText("Código de evento");

        editLabel.setForeground(new java.awt.Color(153, 153, 153));
        editLabel.setText("Editar");

        idSearchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                idSearchBarCaretUpdate(evt);
            }
        });

        searchLabel.setForeground(new java.awt.Color(153, 153, 153));
        searchLabel.setText("Buscar");

        deleteButton.setText("Eliminar");
        deleteButton.setEnabled(false);
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        editButton.setText("Editar");
        editButton.setEnabled(false);
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        emailParticipantLabel.setText("Email de participante");

        emailSearchBar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                emailSearchBarCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(searchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(134, 134, 134)
                                .addComponent(editButton)
                                .addGap(56, 56, 56)
                                .addComponent(deleteButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(emailParticipantLabel)
                                    .addComponent(eventIdLabel))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(idSearchBar)
                                    .addComponent(emailSearchBar, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(searchButton)
                                .addGap(6, 6, 6)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(newButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(searchLabel)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(eventIdLabel)
                            .addComponent(idSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailParticipantLabel)
                            .addComponent(emailSearchBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(searchButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(deleteButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        AttendanceService attendanceService = new AttendanceService(new AttendanceDB());
        try {
            List<Filter> filter = getFilter();
            List<Attendance> attendances;
            attendances = attendanceService.getAttendancesByFilter(filter);
            GenericTable genericTable = new GenericTable(List.copyOf(attendances), GenericTable.REGISTRATION_MODEL, "Inscripciones encontradas");
            framePrincipal.openNewWindow(genericTable);
            framePrincipal.printOnLog(attendances.size() + " Inscripciones encontradas.");
        } catch (InvalidRequisitesException | NotFoundException | SQLException e) {
            framePrincipal.printOnLog(e.getMessage());
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        AttendanceUpdateForm attendanceUpdateForm = new AttendanceUpdateForm(framePrincipal, UpdateTypeEnum.CREAR);
        framePrincipal.openNewWindow(attendanceUpdateForm);
    }//GEN-LAST:event_newButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        AttendanceService attendanceService = new AttendanceService(new AttendanceDB());
        String eventId = idSearchBar.getText();
        String participantEmail = emailSearchBar.getText();
        try {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Eliminar la inscripción de participante " + participantEmail + "\n en el evento " + eventId + " ?", "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                attendanceService.deleteAttendance(participantEmail, eventId);
                framePrincipal.printOnLog("Inscripción del participante " + participantEmail + " en el evento " + eventId + " eliminada con éxito");
                JOptionPane.showMessageDialog(this, "Inscripción del participante " + participantEmail + "\n en el evento " + eventId + " eliminada con éxito");
            }
        } catch (NotRowsAffectedException | SQLException ex) {
            framePrincipal.printOnLog("Error al intentar eliminar la inscripción - " + ex.getMessage());
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        AttendanceService attendanceService = new AttendanceService(new AttendanceDB());
        Attendance attendance;
        try {
            attendance = attendanceService.getAttendanceByID(emailSearchBar.getText(), idSearchBar.getText());
            AttendanceUpdateForm attendanceUpdateForm = new AttendanceUpdateForm(attendance, idSearchBar.getText(), emailSearchBar.getText(), framePrincipal, UpdateTypeEnum.ACTUALIZAR);
            framePrincipal.openNewWindow(attendanceUpdateForm);
        } catch (NotFoundException | SQLException | InvalidRequisitesException ex) {
            framePrincipal.printOnLog("Error al intentar actualizar la inscripción - " + ex.getMessage());
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void idSearchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_idSearchBarCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_idSearchBarCaretUpdate

    private void validateIsInUse() {
        if (idSearchBar.getText().isBlank() || emailSearchBar.getText().isBlank()) {
            return;
        }
        AttendanceService attendanceService = new AttendanceService(new AttendanceDB());
        try {
            boolean isAttendanceAvailable = !attendanceService.isKeysInUse(emailSearchBar.getText(), idSearchBar.getText());
            if (isAttendanceAvailable) {
                editButton.setEnabled(false);
                deleteButton.setEnabled(false);
            } else {
                editButton.setEnabled(true);
                deleteButton.setEnabled(true);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void emailSearchBarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_emailSearchBarCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_emailSearchBarCaretUpdate

    private List<Filter> getFilter() {
        List<Filter> filters = new ArrayList<>();
        if (!idSearchBar.getText().isBlank()) {
            filters.add(new Filter("event_id", idSearchBar.getText(), FilterTypeEnum.EQUAL));
        }
        if (!emailSearchBar.getText().isBlank()) {
            filters.add(new Filter("participant_email", emailSearchBar.getText(), FilterTypeEnum.EQUAL));
        }
        return filters;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel editLabel;
    private javax.swing.JLabel emailParticipantLabel;
    private javax.swing.JTextField emailSearchBar;
    private javax.swing.JLabel eventIdLabel;
    private javax.swing.JTextField idSearchBar;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton newButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchLabel;
    // End of variables declaration//GEN-END:variables
}
