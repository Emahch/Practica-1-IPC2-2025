/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.attendance;

import com.joca.database.registration.RegistrationDB;
import com.joca.frontend.FramePrincipal;
import com.joca.model.UpdateTypeEnum;
import com.joca.model.registration.Registration;
import com.joca.model.registration.RegistrationTypeEnum;
import com.joca.model.exceptions.DuplicatedKeyException;
import com.joca.model.exceptions.InvalidFormatException;
import com.joca.model.exceptions.InvalidRequisitesException;
import com.joca.model.exceptions.NotFoundException;
import com.joca.model.exceptions.NotRowsAffectedException;
import com.joca.services.RegistrationService;
import java.awt.Color;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author joca
 */
public class AttendanceUpdateForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;
    private String originalParticipantEmail;
    private String originalEventId;
    private UpdateTypeEnum type;
    private Registration registration;

    /**
     * Creates new form CreateRegistrationForm
     *
     * @param framePrincipal
     * @param type
     */
    public AttendanceUpdateForm(FramePrincipal framePrincipal, UpdateTypeEnum type) {
        this.framePrincipal = framePrincipal;
        this.type = type;
        initComponents();
        setTitle(type.getTitleName() + " inscripción");
        updateButton.setText(type.getTitleName());
        typeComboBox.setModel(new DefaultComboBoxModel(RegistrationTypeEnum.values()));
    }

    public AttendanceUpdateForm(Registration registration, String originalEventId, String originalParticipantEmail, FramePrincipal framePrincipal, UpdateTypeEnum type) {
        this(framePrincipal, type);
        this.originalParticipantEmail = originalParticipantEmail;
        this.originalEventId = originalEventId;
        this.registration = registration;
        setRegistration(registration);
    }

    private void setRegistration(Registration registration) {
        eventIdTxt.setText(registration.getEventId());
        emailTxt.setText(registration.getParticipantEmail());
        typeComboBox.setSelectedItem(registration.getType());
        paymentMethodTxt.setText(registration.getPayment().isPresent() ? registration.getPayment().get().getMethod().name() : "No pagado");
        paymentAmountTxt.setText(registration.getPayment().isPresent() ? String.valueOf(registration.getPayment().get().getAmount()) : " - - ");
        statusTxt.setText(registration.getStatus().name());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eventIdLabel = new javax.swing.JLabel();
        eventIdTxt = new javax.swing.JTextField();
        emailLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        paymentMethodLabel = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        paymentMethodTxt = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        typeComboBox = new javax.swing.JComboBox<>();
        labelResult = new javax.swing.JLabel();
        paymentAmountTxt = new javax.swing.JTextField();
        paymentAmountLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        statusTxt = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        eventIdLabel.setText("Código del evento");

        eventIdTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                eventIdTxtCaretUpdate(evt);
            }
        });

        emailLabel.setText("Email de participante");

        typeLabel.setText("Tipo de inscripción");

        paymentMethodLabel.setForeground(new java.awt.Color(153, 153, 153));
        paymentMethodLabel.setText("Método de pago");

        emailTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                emailTxtCaretUpdate(evt);
            }
        });

        paymentMethodTxt.setBackground(new java.awt.Color(51, 51, 51));
        paymentMethodTxt.setEnabled(false);

        updateButton.setText("Crear");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        paymentAmountTxt.setBackground(new java.awt.Color(51, 51, 51));
        paymentAmountTxt.setEnabled(false);

        paymentAmountLabel.setForeground(new java.awt.Color(153, 153, 153));
        paymentAmountLabel.setText("Monto de pago");

        statusLabel.setForeground(new java.awt.Color(153, 153, 153));
        statusLabel.setText("Estado");

        statusTxt.setBackground(new java.awt.Color(51, 51, 51));
        statusTxt.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(emailLabel)
                            .addComponent(eventIdLabel)
                            .addComponent(typeLabel)
                            .addComponent(paymentMethodLabel)
                            .addComponent(paymentAmountLabel)
                            .addComponent(statusLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(emailTxt)
                            .addComponent(paymentMethodTxt)
                            .addComponent(eventIdTxt)
                            .addComponent(typeComboBox, 0, 363, Short.MAX_VALUE)
                            .addComponent(paymentAmountTxt)
                            .addComponent(statusTxt)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventIdLabel)
                    .addComponent(eventIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentMethodLabel)
                    .addComponent(paymentMethodTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentAmountLabel)
                    .addComponent(paymentAmountTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(statusLabel)
                    .addComponent(statusTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void eventIdTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_eventIdTxtCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_eventIdTxtCaretUpdate

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {
            parseRegistration();
            RegistrationService registrationService = new RegistrationService(new RegistrationDB());
            if (type.equals(UpdateTypeEnum.ACTUALIZAR)) {
                registrationService.updateRegistration(registration, originalParticipantEmail, originalEventId);
                originalParticipantEmail = registration.getParticipantEmail();
                originalEventId = registration.getEventId();
            } else {
                registrationService.createRegistration(registration);
            }
            setMessage("Inscripción del participante " + registration.getParticipantEmail()+ " en el evento " + registration.getEventId() + " " + type.getUpdateMessage(), true);
            framePrincipal.printOnLog("Inscripción del participante " + registration.getParticipantEmail()+ " en el evento " + registration.getEventId() + " " + type.getUpdateMessage());
        } catch (NotRowsAffectedException | DuplicatedKeyException e) {
            setMessage(e.getMessage(), false);
            framePrincipal.printOnLog(e.getMessage());
        } catch (SQLException e) {
            framePrincipal.printOnLog("Ocurrio un error al " + type.getTitleName().toLowerCase() + " la inscripción, vuelva a intentarlo más tarde - " + e.getMessage());
            setMessage(e.getMessage(), false);
        } catch (InvalidFormatException | InvalidRequisitesException | NotFoundException ex) {
            setMessage(ex.getMessage(), false);
            framePrincipal.printOnLog("Error al " + type.getTitleName().toLowerCase() + " la inscripción - " + ex.getMessage());
        }
        validateIsInUse();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void emailTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_emailTxtCaretUpdate
        validateIsInUse();
    }//GEN-LAST:event_emailTxtCaretUpdate

    private void validateIsInUse() {
        if (eventIdTxt.getText().isBlank() || emailTxt.getText().isBlank()) {
            return;
        }
        RegistrationService registrationService = new RegistrationService(new RegistrationDB());
        try {
            boolean isRegistrationAvailable = !registrationService.isKeysInUse(emailTxt.getText(), eventIdTxt.getText());
            if (!isRegistrationAvailable) {
                if (originalParticipantEmail != null && originalEventId != null
                        && eventIdTxt.getText().equals(originalEventId) && emailTxt.getText().equals(originalParticipantEmail)) {
                    updateButton.setEnabled(true);
                    emailTxt.setForeground(Color.white);
                    eventIdTxt.setForeground(Color.white);
                    return;
                }
                eventIdTxt.setForeground(Color.red);
                emailTxt.setForeground(Color.red);
                updateButton.setEnabled(false);
            } else {
                eventIdTxt.setForeground(Color.white);
                emailTxt.setForeground(Color.white);
                updateButton.setEnabled(true);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void setMessage(String message, boolean success) {
        if (success) {
            labelResult.setForeground(Color.green);
        } else {
            labelResult.setForeground(Color.red);
        }
        labelResult.setText(message);
    }

    private void parseRegistration() throws InvalidFormatException {
        registration = new Registration();
        registration.setEventId(eventIdTxt.getText());
        registration.setParticipantEmail(emailTxt.getText());
        try {
            registration.setType((RegistrationTypeEnum) typeComboBox.getSelectedItem());
        } catch (Exception e) {
            throw new InvalidFormatException("Por favor, ingrese un tipo de inscripción valida");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel eventIdLabel;
    private javax.swing.JTextField eventIdTxt;
    private javax.swing.JLabel labelResult;
    private javax.swing.JLabel paymentAmountLabel;
    private javax.swing.JTextField paymentAmountTxt;
    private javax.swing.JLabel paymentMethodLabel;
    private javax.swing.JTextField paymentMethodTxt;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField statusTxt;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
