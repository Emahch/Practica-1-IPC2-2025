/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.joca.frontend.participant;

import com.joca.database.participant.ParticipantDB;
import com.joca.frontend.FramePrincipal;
import com.joca.model.UpdateTypeEnum;
import com.joca.model.participant.Participant;
import com.joca.model.participant.ParticipantTypeEnum;
import com.joca.model.exceptions.DuplicatedKeyException;
import com.joca.model.exceptions.InvalidFormatException;
import com.joca.model.exceptions.InvalidRequisitesException;
import com.joca.model.exceptions.NotRowsAffectedException;
import com.joca.services.ParticipantService;
import java.awt.Color;
import java.sql.SQLException;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author joca
 */
public class ParticipantUpdateForm extends javax.swing.JInternalFrame {

    private FramePrincipal framePrincipal;
    private String originalEmail;
    private UpdateTypeEnum type;
    private Participant participant;
    
    /**
     * Creates new form CreateParticipantForm
     * @param framePrincipal
     * @param type
     */
    public ParticipantUpdateForm(FramePrincipal framePrincipal, UpdateTypeEnum type) {
        this.framePrincipal = framePrincipal;
        this.type = type;
        initComponents();
        setTitle(type.getTitleName() + " participante");
        updateButton.setText(type.getTitleName());
        typeComboBox.setModel(new DefaultComboBoxModel(ParticipantTypeEnum.values()));
    }
    
    public ParticipantUpdateForm(Participant participant, String originalId, FramePrincipal framePrincipal, UpdateTypeEnum type) {
        this(framePrincipal, type);
        this.originalEmail = originalId;
        this.participant = participant;
        setParticipant(participant);
    }
    
    private void setParticipant(Participant participant) {
        emailTxt.setText(participant.getEmail());
        nameTxt.setText(participant.getName());
        institutionTxt.setText(participant.getInstitution());
        typeComboBox.setSelectedItem(participant.getType());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emailLabel = new javax.swing.JLabel();
        emailTxt = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        institutionLabel = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        institutionTxt = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        typeComboBox = new javax.swing.JComboBox<>();
        labelResult = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        emailLabel.setText("Email");

        emailTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                emailTxtCaretUpdate(evt);
            }
        });

        nameLabel.setText("Nombre");

        typeLabel.setText("Tipo");

        institutionLabel.setText("Institución");

        updateButton.setText("Crear");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(institutionLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(typeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(emailLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTxt)
                            .addComponent(institutionTxt)
                            .addComponent(emailTxt)
                            .addComponent(typeComboBox, 0, 310, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(labelResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailLabel)
                    .addComponent(emailTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(institutionLabel)
                    .addComponent(institutionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelResult, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateButton))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emailTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_emailTxtCaretUpdate
        ParticipantService participantService = new ParticipantService(new ParticipantDB());
        try {
            boolean isParticipantAvailable = !participantService.isKeyInUse(emailTxt.getText());
            if (!isParticipantAvailable) {
                if (originalEmail != null && emailTxt.getText().equals(originalEmail)) {
                    updateButton.setEnabled(true);
                    emailTxt.setForeground(Color.white);
                    return;
                }
                emailTxt.setForeground(Color.red);
                updateButton.setEnabled(false);
            } else {
                emailTxt.setForeground(Color.white);
                updateButton.setEnabled(true);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_emailTxtCaretUpdate

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        try {
            parseParticipant();
            ParticipantService participantService = new ParticipantService(new ParticipantDB());
            if (type.equals(UpdateTypeEnum.ACTUALIZAR)) {
                participantService.updateParticipant(participant, originalEmail);
                originalEmail = participant.getEmail();
            } else {
                participantService.createParticipant(participant);
            }
            setMessage("Participante con email " + participant.getEmail()+ " " + type.getUpdateMessage(), true);
            framePrincipal.printOnLog("Participante con email " + participant.getEmail()+ " " + type.getUpdateMessage());
        } catch (NotRowsAffectedException | DuplicatedKeyException e) {
            setMessage(e.getMessage(), false);
            framePrincipal.printOnLog(e.getMessage());
        } catch (SQLException e) {
            framePrincipal.printOnLog("Ocurrio un error al " + type.getTitleName().toLowerCase() + " el participante, vuelva a intentarlo más tarde - " + e.getMessage());
            setMessage(e.getMessage(), false);
        } catch (InvalidFormatException | InvalidRequisitesException ex) {
            setMessage(ex.getMessage(), false);
            framePrincipal.printOnLog("Error al " + type.getTitleName().toLowerCase() + " el participante - " + ex.getMessage());
        }
        emailTxtCaretUpdate(null);
    }//GEN-LAST:event_updateButtonActionPerformed

    private void setMessage(String message, boolean success) {
        if (success) {
            labelResult.setForeground(Color.green);
        } else {
            labelResult.setForeground(Color.red);
        }
        labelResult.setText(message);
    }
    
    private void parseParticipant() throws InvalidFormatException {
        participant = new Participant();
        participant.setEmail(emailTxt.getText());
        participant.setName(nameTxt.getText());
        participant.setInstitution(institutionTxt.getText());
        try {
            participant.setType((ParticipantTypeEnum) typeComboBox.getSelectedItem());            
        } catch (Exception e) {
            throw new InvalidFormatException("Por favor, ingrese un tipo de participante valido");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel emailLabel;
    private javax.swing.JTextField emailTxt;
    private javax.swing.JLabel institutionLabel;
    private javax.swing.JTextField institutionTxt;
    private javax.swing.JLabel labelResult;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
